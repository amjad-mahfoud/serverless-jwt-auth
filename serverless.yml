service: serverless-jwt-auth

frameworkVersion: ">=1.1.0 <2.0.0"

plugins:
  - serverless-dynamodb-local
  - serverless-offline

custom:
  secrets: ${file(secrets.json)}
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: true
    migration:
      dir: database/migrations
    seed:
      test:
        sources:
          - table: ${self:provider.environment.TABLE_USERS}
            sources: [database/seeds/users.json]
          - table: ${self:provider.environment.TABLE_TASKS}
            sources: [database/seeds/tasks.json]

provider:
  name: aws
  runtime: nodejs8.10
  stage: production
  region: ap-southeast-2
  environment:
    JWT_SECRET: ${self:custom.secrets.JWT_SECRET}
    TABLE_USERS: ${self:service}-Users
    TABLE_TASKS: ${self:service}-Tasks
  iamRoleStatements:
  - Effect: Allow
    Action:
      - dynamodb:Query
      - dynamodb:Scan
      - dynamodb:GetItem
      - dynamodb:PutItem
      - dynamodb:UpdateItem
      - dynamodb:DeleteItem
    Resource: 
      - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.TABLE_USERS}"
      - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.TABLE_TASKS}"

resources:
  Resources:
    UsersDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.TABLE_USERS}
    TasksDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.TABLE_TASKS}

functions:
  verify-token:
    handler: app/Middleware/VerifyToken.auth

  login:
    handler: app/Handlers/Users.login
    events:
      - http:
          path: login
          method: post
          cors: true

  register:
    handler: app/Handlers/Users.register
    events:
      - http:
          path: register
          method: post
          cors: true

  user:
    handler: app/Handlers/Users.user
    events:
      - http:
          path: user
          method: get
          cors: true
          authorizer: verify-token

  userUpdate:
    handler: app/Handlers/Users.update
    events:
      - http:
          path: user
          method: put
          cors: true
          authorizer: verify-token

  getTasks:
    handler: app/Handlers/Tasks.list
    events:
      - http:
          path: tasks
          method: get
          cors: true
          authorizer: verify-token

  createTask:
    handler: app/Handlers/Tasks.create
    events:
      - http:
          path: task
          method: post
          cors: true
          authorizer: verify-token
